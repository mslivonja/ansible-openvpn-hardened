---
- name: OpenVPN | Harden | Set sudo user comment variable
  set_fact:
    sudo_user_comment: "ansible-openvpn-hardened sudo user"

- name: OpenVPN | Harden | Check for existing user
  shell: "grep \"{{ sudo_user_comment }}\" /etc/passwd | awk -F: '{print $1}'"
  changed_when: false
  register: sudo_user_check
  failed_when: false

- name: OpenVPN | Harden | Generate sudo username
  shell: grep -v -P "[\x80-\xFF]" {{ path_dict }} | sed -e "s/'//" | shuf -n 1 | xargs | sed -e 's/ /-/g'
  register: generated_sudo_username
  when: sudo_user_check.stdout == ""

- name: OpenVPN | Harden | Set sudo username variable
  set_fact:
    sudo_username: "{{ sudo_user_check.stdout }}"
  when: sudo_user_check.stdout != ""

- name: OpenVPN | Harden | Set sudo username variable
  set_fact:
    sudo_username: "{{ generated_sudo_username.stdout }}"
  when: sudo_user_check.stdout == ""

# This is complicated to ensure the PAM password requirements set in harden_password.yml are met
- name: OpenVPN | Harden | Generate sudo user password
  shell: echo "$(head /dev/urandom | tr -dc A-Z | head -c2)$(head /dev/urandom | tr -dc a-z | head -c2)$(head /dev/urandom | tr -dc 0-9 | head -c2)$(head /dev/urandom | tr -dc '#$%&*()' | head -c2)$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c8)"
  register: sudo_user_password
  changed_when: false

- name: OpenVPN | Harden | Create {{ sudo_username }} group
  group:
    name: "{{ sudo_username }}"

- name: OpenVPN | Harden | Create sudo user, '{{ sudo_username }}'
  user:
    name: "{{ sudo_username }}"
    password: "{{ sudo_user_password.stdout | password_hash('sha512') }}"
    update_password: on_create
    shell: "/bin/bash"
    groups: "{{ sudo_username }},{{ sudo_group }}"
    comment: "{{ sudo_user_comment }}"
  notify:
    - New Sudo User Creds

# As recommended by https://help.ubuntu.com/lts/serverguide/user-management.html
- name: OpenVPN | Harden | Remove world readable home directory permissions
  file:
    path: "/home/{{ sudo_username }}"
    state: directory
    mode: 0750

- name: OpenVPN | Harden | Add or update authorized key
  action: authorized_key user={{ sudo_username }} key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

# Password setting used here is similar to running 'passwd -l root' which just
# prefixes the hashed password in /etc/shadow with an '!', making it an invalid hash
# The supplied password is expected to already be hashed and the supplied value is
# put directly into /etc/shadow so the result is an /etc/shadow that looks like:
# ...
# root:!:...
# ...
# This both clears and disables any existing password for the root account.
- name: OpenVPN | Harden | Disable root login
  user:
    name: root
    shell: /usr/sbin/nologin
    password: '!'

# As recommended by LinEnum.
- name: OpenVPN | Harden | Only root can read root's .bash_history
  file:
    path: /root/.bash_history
    mode: 0600
    state: touch
  changed_when: false

- name: OpenVPN | Harden | Disable root tty access
  copy:
    content: ""
    dest: /etc/securetty
